services:
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: development
    image: backend-django:dev
    container_name: ${BACKEND_HOST}
    restart: unless-stopped
    environment:
      - DEBUG=${BACKEND_DEBUG}
      - SECRET_KEY=${BACKEND_SECRET_KEY}
      - ALLOWED_HOSTS=${BACKEND_ALLOWED_HOSTS}
      - DB_HOST=${BACKEND_DB_HOST}
      - DB_PORT=${BACKEND_DB_PORT}
      - DB_NAME=${BACKEND_DB_NAME}
      - DB_USER=${BACKEND_DB_USER}
      - DB_PASSWORD=${BACKEND_DB_PASS}
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    volumes:
      - ../backend:/app/:delegated
    depends_on:
      backend-db:
        condition: service_healthy
    networks:
      - backend-network

  backend-db:
    image: postgres:latest
    container_name: ${BACKEND_DB_HOST}
    restart: unless-stopped
    volumes:
      - backend-db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${BACKEND_DB_USER}
      POSTGRES_PASSWORD: ${BACKEND_DB_PASS}
      POSTGRES_DB: ${BACKEND_DB_NAME}
    ports:
      - ${BACKEND_DB_PORT}:${BACKEND_DB_PORT}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${BACKEND_DB_USER}", "-d", "${BACKEND_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge

volumes:
  backend-db-data: